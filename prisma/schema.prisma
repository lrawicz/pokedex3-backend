// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}

model Pokemon {
  id         Int                 @id 
  name      String @unique
  specie    String?
  type1     String? 
  type2    String?
  generation Int
  hp      Int
  attack  Int
  defense Int
  specialAttack Int
  specialDefense Int
  speed Int

  weight Int?
  height Int?
  color String?
  isBaby Boolean?
  isLegendary Boolean?
  isMythical Boolean?
  growthRate String?
  habitat String?
  pastHabilities Json?
  abilities PokemonAbility[]
  movesLearns LearnMove[]
  genderRate Int?
  captureRate Int?
  hasGenderDifferences Boolean?
}


model Ability {
  id         Int                 @id @default(autoincrement())
  name      String @unique
  effect String?
  shortEffect String?
  flavorText String?
  generation Int
  new Boolean? @default(false)
  mechanics  Mechanic[]
  is_main_series Boolean @default(true)
  pokemonsAbilities PokemonAbility[]
  //related_moves String[]
}

model Mechanic {
  id         Int   @id @default(autoincrement())
  abilityId  Int?
  moveId     Int?

  ability    Ability?  @relation(fields: [abilityId], references: [id])
  move       move?     @relation(fields: [moveId], references: [id])  

  triggers MechanicsTriggers[]
  targets MechanicsTargets[]
  effects MechanicsEffects[]
}

model Trigger {
  id    Int                 @id @default(autoincrement())
  name  String @unique
  mechanics MechanicsTriggers[]
}

model Target {
  id    Int                 @id @default(autoincrement())
  name  String @unique
  mechanics MechanicsTargets[]
}

model Effect {
  id    Int                 @id @default(autoincrement())
  name  String @unique
  mechanics MechanicsEffects[]
}
model MechanicsTriggers {
  trigger    Trigger     @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  triggerId     Int 
  mechanic   Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)
  mechanicId Int 
  @@id([mechanicId , triggerId])
}
model MechanicsTargets {
  target    Target     @relation(fields: [targetId], references: [id], onDelete: Cascade)
  targetId     Int 
  mechanic   Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)
  mechanicId Int 
  @@id([mechanicId , targetId])
}

model MechanicsEffects {
  effect    Effect     @relation(fields: [effectId], references: [id], onDelete: Cascade)
  effectId     Int 
  mechanic   Mechanic @relation(fields: [mechanicId], references: [id], onDelete: Cascade)
  mechanicId Int 
  @@id([mechanicId , effectId])
}

model PokemonAbility {
  id         Int                 @id @default(autoincrement())
  pokemonId  Int @default(0)
  pokemon    Pokemon @relation(fields: [pokemonId], references: [id])
  abilityId  Int @default(0)
  ability    Ability @relation(fields: [abilityId], references: [id])
  slot       Int?
  isHidden  Boolean?
  generation Int
}

model move {
    id Int @id //id: data.id
    name String //name: data.name,
    generation Int //generation: data.generation.name,

    flavorText String?
    effect String?
    power Int? //power: data.power,
    priority Int //priority: data.priority,
    accuracy Int? //accurrency: data.accuracy,
    type String //type: data.type.name,
    damageClass String //damageClass: data.damage_class.name,
    target String //target: data.target.name,
    pp Int? //pp: data.pp,
    statChanges Json  //statChanges: data.stat_changes,
    pastValues Json //pastValues: data.past_values,
    effectChance Int? //effectChance: data.effect_chance,
    effectEntries String? // data.effect_entries.filter((item:any) => {item.language.name == "en"})[0].effect,  
    shortEffect String? //:data.effect_entries.filter((item:any) => {item.language.name == "en"})[0].short_effect,  
    effectChanges Json
    contestCombo Json
    contestEffectId Int?
    contestType String?
    metaAilment String?
    metaAilmentChance Int?
    metaCategory String?
    metaCritRate Int?
    metaDrain Int?
    metaFlinchChance Int?
    metaHealing Int?
    metaMaxHits Int?
    metaMaxTurns Int?
    metaMinHits Int?
    metaMinTurns Int?
    metaStatChance Int?

    new Boolean? @default(true)

    mechanics Mechanic[]
    learnMoves LearnMove[]
    move_moveGrups move_moveGrups[]
    //contestEffect @relation(fields: [contestEffectId], references: [id])
}

model versionGroup{
  id Int @id
  name String
  generation Int
  order Int
  versions String[]
  leanMoves LearnMove[]
}
model LearnMove{
  id Int @id @default(autoincrement())
  pokemonId Int
  moveId Int
  method String
  versionGroupId Int
  level Int

  versionGroup versionGroup @relation(fields: [versionGroupId], references: [id])  
  move move @relation(fields: [moveId], references: [id])
  pokemon Pokemon @relation(fields: [pokemonId], references: [id],onDelete: Cascade) 
}
model moveGroups{
  id Int @id
  name String
  generation Int
  moveGrups move_moveGrups[]
}
model move_moveGrups{
  @@id([moveId, moveGroupId])
  moveId Int
  moveGroupId Int

  move move @relation(fields: [moveId], references: [id])
  moveGroup moveGroups @relation(fields: [moveGroupId], references: [id])
}